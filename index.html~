<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>舒尔特方格游戏</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }

        #language-switch {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }

        #game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 90%;
            width: 400px;
        }

        #instruction {
            text-align: center;
            margin-bottom: 20px;
            max-width: 300px;
            word-wrap: break-word;
        }

        #grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 5px;
            margin-bottom: 20px;
        }

        .cell {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            background-color: #fff;
            border: 1px solid #ccc;
            cursor: pointer;
            user-select: none;
        }

        .cell.selected {
            background-color: #90EE90;
        }

        #buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        #timer {
            font-size: 24px;
            margin-bottom: 20px;
        }

        #records {
            width: 100%;
            border-collapse: collapse;
        }

        #records th, #records td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        #records th {
            background-color: #f2f2f2;
        }

        @media (max-width: 600px) {
            .cell {
                width: 50px;
                height: 50px;
                font-size: 20px;
            }
        }

        @media (max-width: 400px) {
            .cell {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div id="language-switch">中文 | English</div>
    <div id="game-container">
        <h1 id="page-title">舒尔特方格游戏 - 第1关</h1>
        <div id="instruction">点击开始，按从小到大依次点击1到25</div>
        <div id="grid"></div>
        <div id="buttons">
            <button id="start">开始</button>
            <button id="reset">重置</button>
        </div>
        <div id="timer">00:00:00:000</div>
        <table id="records">
            <thead>
                <tr>
                    <th>昵称</th>
                    <th>完成时间</th>
                    <th>关卡</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <script>
        const grid = document.getElementById('grid');
        const startButton = document.getElementById('start');
        const resetButton = document.getElementById('reset');
        const timerDisplay = document.getElementById('timer');
        const recordsTable = document.getElementById('records').getElementsByTagName('tbody')[0];
        const languageSwitch = document.getElementById('language-switch');
        const pageTitle = document.getElementById('page-title');
        const instruction = document.getElementById('instruction');

        let numbers = Array.from({length: 25}, (_, i) => i + 1);
        let currentNumber = 1;
        let lastSelectedCell = null;
        let startTime;
        let timerInterval;
        let isGameRunning = false;
        let currentPage = 1;
        let isEnglish = false;

        const translations = {
            'zh': {
                'title': '舒尔特方格游戏 - 第',
                'level': '关',
                'instruction': '点击开始，按从小到大依次点击1到25',
                'start': '开始',
                'reset': '重置',
                'nickname': '昵称',
                'completionTime': '完成时间',
                'level': '关卡',
                'congratulations': '恭喜完成！请输入您的昵称：',
                'nextNumber': '下一个正确的数字是：',
                'switchLanguage': '中文 | English',
                'gameOver': '游戏结束！'
            },
            'en': {
                'title': 'Schulte Grid Game - Level ',
                'level': '',
                'instruction': 'Click start, then click numbers from 1 to 25 in ascending order',
                'start': 'Start',
                'reset': 'Reset',
                'nickname': 'Nickname',
                'completionTime': 'Completion Time',
                'level': 'Level',
                'congratulations': 'Congratulations! Please enter your nickname:',
                'nextNumber': 'The next correct number is: ',
                'switchLanguage': 'English | 中文',
                'gameOver': 'Game Over!'
            }
        };

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function createGrid() {
            grid.innerHTML = '';
            shuffleArray(numbers);
            numbers.forEach(num => {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.textContent = num;
                cell.addEventListener('click', () => selectCell(cell, num));
                grid.appendChild(cell);
            });
        }

        function selectCell(cell, num) {
            if (!isGameRunning) return;
            if (num === currentNumber) {
                if (currentPage === 1) {
                    if (lastSelectedCell) {
                        lastSelectedCell.classList.remove('selected');
                    }
                    cell.classList.add('selected');
                    lastSelectedCell = cell;
                }
                currentNumber++;
                if (currentNumber > 25) {
                    endGame();
                }
            } else {
                alert(translations[isEnglish ? 'en' : 'zh']['nextNumber'] + currentNumber);
            }
        }

        function startGame() {
            if (isGameRunning) return;
            isGameRunning = true;
            currentNumber = 1;
            createGrid();
            startTime = new Date().getTime();
            timerInterval = setInterval(updateTimer, 10);
            startButton.disabled = true;
        }

        function resetGame() {
            isGameRunning = false;
            clearInterval(timerInterval);
            timerDisplay.textContent = '00:00:00:000';
            currentNumber = 1;
            if (currentPage === 1 && lastSelectedCell) {
                lastSelectedCell.classList.remove('selected');
            }
            lastSelectedCell = null;
            createGrid();
            startButton.disabled = false;
        }

        function endGame() {
            isGameRunning = false;
            clearInterval(timerInterval);
            const endTime = new Date().getTime();
            const totalTime = endTime - startTime;
            const formattedTime = formatTime(totalTime);
            const name = prompt(translations[isEnglish ? 'en' : 'zh']['congratulations']);
            if (name) {
                addRecord(name, formattedTime, currentPage);
            }
            startButton.disabled = false;

            if (currentPage === 1) {
                currentPage = 2;
                updatePageTitle();
                resetGame();
            } else {
                alert(translations[isEnglish ? 'en' : 'zh']['gameOver']);
            }
        }

        function updateTimer() {
            const currentTime = new Date().getTime();
            const elapsedTime = currentTime - startTime;
            timerDisplay.textContent = formatTime(elapsedTime);
        }

        function formatTime(ms) {
            const date = new Date(ms);
            return date.toISOString().substr(11, 12);
        }

        function addRecord(name, time, level) {
            const row = recordsTable.insertRow(0);
            const nameCell = row.insertCell(0);
            const timeCell = row.insertCell(1);
            const levelCell = row.insertCell(2);
            nameCell.textContent = name;
            timeCell.textContent = time;
            levelCell.textContent = level;
        }

        function updatePageTitle() {
            pageTitle.textContent = `${translations[isEnglish ? 'en' : 'zh']['title']}${currentPage}${translations[isEnglish ? 'en' : 'zh']['level']}`;
        }

        function switchLanguage() {
            isEnglish = !isEnglish;
            updateTexts();
        }

        function updateTexts() {
            const lang = isEnglish ? 'en' : 'zh';
            languageSwitch.textContent = translations[lang]['switchLanguage'];
            updatePageTitle();
            instruction.textContent = translations[lang]['instruction'];
            instruction.style.textAlign = 'center';
            instruction.style.wordSpacing = isEnglish ? '0.3em' : 'normal';

            // 为长文本添加自动换行
            if (isEnglish) {
                let words = instruction.textContent.split(' ');
                let lines = [];
                let currentLine = '';
                words.forEach(word => {
                    if ((currentLine + word).length > 30) {
                        lines.push(currentLine.trim());
                        currentLine = '';
                    }
                    currentLine += word + ' ';
                });
                if (currentLine) {
                    lines.push(currentLine.trim());
                }
                instruction.innerHTML = lines.join('<br>');
            }

            startButton.textContent = translations[lang]['start'];
            resetButton.textContent = translations[lang]['reset'];
            document.querySelector('#records th:nth-child(1)').textContent = translations[lang]['nickname'];
            document.querySelector('#records th:nth-child(2)').textContent = translations[lang]['completionTime'];
            document.querySelector('#records th:nth-child(3)').textContent = translations[lang]['level'];
        }

        startButton.addEventListener('click', startGame);
        resetButton.addEventListener('click', resetGame);
        languageSwitch.addEventListener('click', switchLanguage);

        createGrid();
        updateTexts();
    </script>
</body>

<div style="display: none;">
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-77TDFNRC7C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-77TDFNRC7C');
</script>


</html>
